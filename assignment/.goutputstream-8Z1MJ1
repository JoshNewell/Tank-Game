//Includes
#include <GL/glew.h>
#include <GL/glut.h>
#include <Shader.h>
#include <Vector.h>
#include <Matrix.h>
#include <Mesh.h>
#include <Texture.h>
#include <SphericalCameraManipulator.h>
#include <iostream>
#include <fstream>
#include <math.h>
#include <string>

//define
#define INITPAN 0.0
#define INITTILT -PI/2
#define INITRAD 0.0
#define PI 3.14159265

#define ISCREENW 720
#define ISCREENH 720

#define TINITX 0
#define TINITY 0
#define TINITZ -10
#define CINITX 10
#define CINITY 10
#define CINITZ 10

#define mapL 8
#define mapW 10
#define mapSize 5

typedef struct Mouse{
   float x = ISCREENW/2;
   float y = ISCREENH/2;
   int state = 1;
   int button = -1; 
};

//Function Prototypes
bool initGL(int argc, char** argv);
void display(void);
void keyboard(unsigned char key, int x, int y);
void keyUp(unsigned char key, int x, int y);
void handleKeys();
void mouse(int button, int state, int x, int y);
void motion(int x, int y);
void Timer(int value);

//Function Prototypes(self)
int drawMesh(float x, float y, float z, Mesh mesh, GLuint texture, float rotationP, float rotationT, float scale);
int drawCreate(float x, float y, float z, float rotation, float rotX, float rotY, float rotZ, float scale);
int drawMaze(float scale);
int drawTank(float offX, float offY, float offZ, float scale);
int setCamera();
int updatePositions(int floorScale);
int loadMap(char* mapFile);
int setOriantation(float Pan, float Tilt);
int handleMouse();
float determinGrav(float x, float y, float z, int floorScale);

void initShader();					                //Function to init Shader
void initGeometry();					            //Function to init Geometry 
void drawGeometry();					            //Function to draw Geometry
void initTexture(std::string filename, GLuint & textureID);

void render2dText(std::string text, float r, float g, float b, float x, float y);


//Global Variables(self)
GLuint shaderProgramID;			                    // Shader Program ID
GLuint vertexPositionAttribute;		      // Vertex Position Attribute Location
GLuint vertexNormalAttribute;		
GLuint vertexTexcoordAttribute;

//Material Prop (self)
GLuint LightPositionUniformLocation;                // Light Position Uniform   
GLuint AmbientUniformLocation;
GLuint SpecularUniformLocation;
GLuint SpecularPowerUniformLocation;

Vector3f lightPosition= Vector3f(20.0,20.0,20.0);   // Light Position 
Vector3f ambient    = Vector3f(0.1,0.1,0.1);
Vector3f specular   = Vector3f(1.0,1.0,1.0);
float specularPower(10.0);

GLuint TextureMapUniformLocation;               	// Texture Map Location
GLuint textures[4];

//Viewing (self)
SphericalCameraManipulator cameraManip;
Matrix4x4 ModelViewMatrix;		                    // ModelView Matrix
GLuint MVMatrixUniformLocation;		                // ModelView Matrix Uniform
Matrix4x4 ProjectionMatrix;		                    // Projection Matrix
GLuint ProjectionUniformLocation;	                // Projection Matrix Uniform Location

//Meshs(self)
Mesh create;
Mesh coin;
Mesh body;				                            // Mesh
Mesh wheelB;
Mesh wheelF;
Mesh turret;
Mesh shot;


//Screen size
int screenWidth(ISCREENW);
int screenHeight(ISCREENH);


//Array of key states
bool keyStates[256];



Vector3f tankPos(TINITX, TINITY, TINITZ);
Vector3f cameraPos(CINITX, CINITY, CINITZ);

int map[mapW][mapL];

float speed(0.1);
float rotationBody(0.0); 
float rotationTurret(0.0);
int moving(0);
float timeSet(0.0);

Mouse globalMouse;

int test1;
int test2;
int test3;

//! Main Program Entry
int main(int argc, char** argv){	
    //init OpenGL
    if(!initGL(argc, argv)){
	return -1;
    }

    //Init Key States to false;    
    for(int i = 0 ; i < 256; i++){
        keyStates[i] = false;
    }
     
    //Set up your program(self)
    initShader();

    create.loadOBJ("../models/cube.obj");    
    coin.loadOBJ("../models/coin.obj"); 
    body.loadOBJ("../models/chassis.obj");  
    wheelB.loadOBJ("../models/back_wheel.obj");
    wheelF.loadOBJ("../models/front_wheel.obj");
    turret.loadOBJ("../models/turret.obj");
    shot.loadOBJ("../models/ball.obj");

    initTexture("../models/Crate.bmp", textures[0]);   
    initTexture("../models/coin.bmp", textures[1]);  
    initTexture("../models/hamvee.bmp", textures[2]);    
    initTexture("../models/ball.bmp", textures[3]);

    cameraManip.setPanTiltRadius(INITPAN, INITTILT, INITRAD);
    loadMap(argv[1]);

    //Enter main loop
    glutMainLoop();

    //Delete shader program
    glDeleteProgram(shaderProgramID);

    return 0;
}

//! Function to Initlise OpenGL
bool initGL(int argc, char** argv){
    //StratGL
    glutInit(&argc, argv);//Init GLUT
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_DEPTH);//Set Display Mode
    glutInitWindowSize(screenWidth, screenHeight);//Set Window Size
    glutInitWindowPosition(200, 200);// Window Position
    glutCreateWindow("World WAR Tank!");//Create Window
    if (glewInit() != GLEW_OK) // Init GLEW
	{
	    std::cout << "Failed to initialize GLEW" << std::endl;
	    return false;
	}
	
    //Set Display function
    glutDisplayFunc(display);
	
    //Set Interaction Functions
    glutKeyboardFunc(keyboard);
    glutKeyboardUpFunc(keyUp); 
    glutMouseFunc(mouse);
    glutPassiveMotionFunc(motion);
    glutMotionFunc(motion);
	
    //self interaction
    glEnable(GL_DEPTH_TEST);
    glEnable(GL_TEXTURE_2D);

    //Start start timer function after 100 milliseconds
    glutTimerFunc(100,Timer, 0);

    return true;
}




//! Display Loop
void display(void){

   //Start up
   handleKeys();//Handle keys
   glViewport(0,0,screenWidth, screenHeight);//Set Viewport
   glClear( GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT );// Clear the screen

   //Draw your scene (self)
   glUseProgram(shaderProgramID);

   //Lighting(self)

   ProjectionMatrix.perspective(90, 1.0, 0.0001, 100.0);
   glUniformMatrix4fv(	
	ProjectionUniformLocation, 
	1,							
	false,						
	ProjectionMatrix.getPtr());
		      
   glUniform3f(LightPositionUniformLocation, lightPosition.x,lightPosition.y,lightPosition.z);
   glUniform4f(AmbientUniformLocation, ambient.x, ambient.y, ambient.z, 1.0);
   glUniform4f(SpecularUniformLocation, specular.x, specular.y, specular.z, 1.0);
   glUniform1f(SpecularPowerUniformLocation, specularPower);

   updatePositions(mapSize);
   handleMouse();

   //create objects
   drawTank(tankPos.x,tankPos.y,tankPos.z, 1);
   drawMaze(mapSize);

   glUseProgram(0);
   glBindTexture(GL_TEXTURE_2D, 0);

   float pan = tankPos.x;
   std::stringstream s1;
   s1 << pan;
   std::string panS = "x: " + s1.str();

   float tilt = tankPos.y;
   std::stringstream s2;
   s2 << tilt;
   std::string tiltS = "y: " +s2.str();

   float radius = tankPos.z;
   std::stringstream s3;
   s3 << radius;
   std::string radiusS = "z: " +s3.str();

   std::stringstream s4;
   float digit;
   double sc = 0.01;
   digit = (int)(timeSet/sc)*sc;
   s4 << digit;
   std::string timeSetS = "Timer: " +s4.str();

   render2dText(panS, 1.0, 1.0, 1.0, -1.0, 0.8);
   render2dText(tiltS, 1.0, 1.0, 1.0, -1.0, 0.7);
   render2dText(radiusS, 1.0, 1.0, 1.0, -1.0, 0.6);
   render2dText(timeSetS, 1.0, 1.0, 1.0, -1.0, 0.5);

   glClearColor(0.6,0.6,1.0,1.0);
    
   //Swap Buffers and post redisplay
   glutSwapBuffers();
   glutPostRedisplay();
}



//! Keyboard Interaction
void keyboard(unsigned char key, int x, int y){
   //Quits program when esc is pressed
   if (key == 27){	//esc key code
	exit(0);
   }
    
   //Set key status
   keyStates[key] = true;
}

//! Handle key up situation
void keyUp(unsigned char key, int x, int y){
   keyStates[key] = false;
}


//! Handle Keys
void handleKeys(){
   //keys should be handled here
   if(keyStates['w']){
        moving = 1;
   }
   if(keyStates['s']){
        moving = -1;
   }
   if(keyStates['d']){
        rotationBody += 0.01;
        rotationTurret += 0.01;
   }
   if(keyStates['a']){
        rotationBody -= 0.01;
        rotationTurret -= 0.01;
   }
   if((!keyStates['w']) && (!keyStates['s'])){
        moving = 0;
   }
}

//! Mouse Interaction
void mouse(int button, int state, int x, int y){
   globalMouse.button = button;
   globalMouse.state = state;
}

//! Motion
void motion(int x, int y){
   globalMouse.x = x;
   glo